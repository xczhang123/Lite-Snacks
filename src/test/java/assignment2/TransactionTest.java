/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment2;

import assignment2.backend.*;
import assignment2.model.*;

import java.util.List;

import java.sql.Timestamp;
import java.util.HashMap;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;

import javafx.collections.ObservableList;

import java.sql.Timestamp;
class TransactionTest {

    private TransactionDB db;

    @BeforeEach
    public void setup() {
        db = new TransactionDB();
    }

    /*
    * Test get item detail methods in database
    */
    @Test
    void getDetailValidTest(){
        List<Snack> tests = SnackDB.view("Test");
        HashMap<Snack, String> snacks = new HashMap<Snack, String>();
        snacks.put(tests.get(0), "1");
        User user = new User(2, "seller");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());

        Transaction trans = new Transaction(1, timestamp, "valid", user, "card", 100, 0, snacks);
        Transaction trans1 = new Transaction(timestamp, "valid", user, "card", 100, 0, snacks);

        String s = "1" + "," +
                    trans.getTime().toString() + "," +
                    Integer.toString(trans.getUser().getId()) + "," +
                    trans.getPayment() + "," +
                    Double.toString(trans.getPaid()) + "," +
                    Double.toString(trans.getChange());

        String s1 = "";
        for (Snack snack : snacks.keySet()){
          s1 = s1 + Integer.toString(snack.getCode()) + "," + snack.getName() + "," + snacks.get(snack) + "\n";
        }

        assertEquals(s, trans.toStringValid());
        assertEquals(s1, trans.toStringSnacks());
        assertEquals(snacks, trans.getSnacks());
    }

    /*
    * Test get item detail methods in database
    */
    @Test
    void getDetailInvalidTest(){
        User user = new User(2, "seller");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        String reason = "timeout";

        Transaction trans = new Transaction(1, timestamp, "cancelled", user, reason);
        Transaction trans1 = new Transaction( timestamp, "cancelled", user, reason);

        String s = "1" + "," +
                    trans.getTime().toString() + "," +
                    Integer.toString(trans.getUser().getId()) + "," +
                    trans.getReason();

        assertEquals(s, trans.toStringCancelled());
        assertEquals("cancelled", trans.getStatus());
        assertEquals(1, trans.getid());
    }

    /*
    * Test get item detail methods in database
    * both invalid and valid rollno
    */
    @Test
    void getDetailAnonValidTest3(){
        List<Snack> tests = SnackDB.view("Test");
        HashMap<Snack, String> snacks = new HashMap<Snack, String>();
        snacks.put(tests.get(0), "1");
        User user = new User(-1, "seller");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());

        Transaction trans = new Transaction(1, timestamp, "valid", user, "card", 100, 0, snacks);

        String s = "1" + "," +
                    trans.getTime().toString() + "," +
                    "anonymous" + "," +
                    trans.getPayment() + "," +
                    Double.toString(trans.getPaid()) + "," +
                    Double.toString(trans.getChange());

        assertEquals(s, trans.toStringValid());
    }

    /*
    * Test get item detail methods in database
    */
    @Test
    void getDetailAnonInvalidTest(){
        User user = new User(-1, "seller");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        String reason = "timeout";

        Transaction trans = new Transaction(1, timestamp, "cancelled", user, reason);
        Transaction trans1 = new Transaction( timestamp, "cancelled", user, reason);

        String s = "1" + "," +
                    trans.getTime().toString() + "," +
                    "anonymous" + "," +
                    trans.getReason();

        assertEquals(s, trans.toStringCancelled());
        assertEquals("cancelled", trans.getStatus());
        assertEquals(1, trans.getid());
    }

    /*
    * Test the getSnacks for specific user
    */
    @Test
    void getSnackTest(){

        Snack snack = new Snack(17, "Test item 1", "Test", 5, 4.0f, 2002, "");

        HashMap<Snack, String> snacks = db.getSnacks(214);

        for (Snack s: snacks.keySet()){
          assertEquals("1", snacks.get(s));
        }
    }

    /*
    * Add valid transaction test
    */
    @Test
    void addValidTransTest(){
        List<Snack> tests = SnackDB.view("Test");
        HashMap<Snack, String> snacks = new HashMap<Snack, String>();
        snacks.put(tests.get(0), "1");
        User user = new User(5, "test");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());

        Transaction trans1 = new Transaction(timestamp, "test", user, "card", 100, 0, snacks);

        db.addValidTransaction(trans1);
        int id = db.getLatestTrans();


        HashMap<Snack, String> getSnacks = db.getSnacks(id);

        for(Snack s: getSnacks.keySet()){
            assertEquals(tests.get(0).getRollno(), s.getRollno());
        }
    }

    /*
    * Add cancelled transaction test
    */
    @Test
    void addCancelledTransTest(){
        User user = new User(5, "test");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        String reason = "timeout";
        Transaction trans1 = new Transaction( timestamp, "test", user, reason);

        db.addCancelledTransaction(trans1);
        int id = db.getLatestTrans();

        HashMap<Snack, String> getSnacks = db.getSnacks(id);

        assertEquals(0, getSnacks.size());
    }
}
