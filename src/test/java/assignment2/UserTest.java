/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment2;

import assignment2.backend.*;
import assignment2.model.*;

import java.util.List;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;

class UserTest {

    /*
    * Test valid user validate
    */
    @Test
    void validUserValidateTest() {
        UserDB db = new UserDB();
        User validUser = db.validate("owner", "owner");
        assertEquals("owner", validUser.getType());
    }

    /*
    * Test get item detail methods in database
    * both invalid and valid rollno
    */
    @Test
    void getDetailTest(){
        User user = new User(4,"anon","anon");
        assertEquals("anon,anon", user.toString());
        assertEquals(4, user.getId());
        user.setid(5);
        assertEquals(5, user.idProperty().get());
        assertEquals("anon", user.getName());
        user.setName("hi");
        assertEquals("hi", user.nameProperty().get());
        assertEquals("anon", user.getType());
        user.setType("hi");
        assertEquals("hi", user.typeProperty().get());
    }

    /*
    * Test get item detail methods in database
    */
    @Test
    void getDetailTest2(){
        User user = new User("anon","pass","anon");
        assertEquals("pass", user.getPassword());
        user.setPassword("pass1");
        assertEquals("pass1", user.getPassword());

        User user1 = new User();
        User user3 = new User(2,"hi");
    }

    /*
    * Test invalid user validate
    */
    @Test
    void invalidUserValidateTest() {
        UserDB db = new UserDB();
        User invalidUser = db.validate("hi", "hi");
        assertNull(invalidUser);
    }

    /*
    * Test anon user validate
    */
    @Test
    void anonUserValidateTest() {
        UserDB db = new UserDB();
        User anonUser = db.validate("anonymous", "hi");
        assertEquals(-1, anonUser.getId());
    }

    /*
    * Test addCard
    */
    @Test
    void addCardTest() {
        UserDB db = new UserDB();
        Card card = new Card("hi","hi");
        User testUser = new User(5, "test");
        db.addCard(card, testUser);
        assertEquals(card.getName(), db.getCard(testUser).getName());
    }

    /*
    * Get invalid card test
    */
    @Test
    void getInvalidCardTest() {
        UserDB db = new UserDB();
        User testUser = new User(1, "owner");
        assertNull(db.getCard(testUser));
    }

    /*
    * Get a list of user except customer
    * Only 3 default roles
    */
    @Test
    void getUsernameTypeTest() {
        UserDB db = new UserDB();
        List<User> users = db.getUsernameType();

        assertEquals(3, users.size());
    }

    /*
    * Testing the addUser and deleteUser tests by validate user to see if it is null
    */
    @Test
    void deletUserTest() {
        UserDB db = new UserDB();
        db.addUser(new User("deletTest", "test", "test"));
        User test = db.validate("deletTest","test");
        assertNotNull( test);
        db.deleteUser(test);
        assertNull( db.validate("deletTest","test"));
    }
}
